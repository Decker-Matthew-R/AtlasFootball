name: Main Pipeline

on:
    push:
    pull_request:
        branches: ["main"]
    workflow_dispatch:

jobs:
    testing:
        name: "üß™ Testing"
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                test-type:
                    - { name: "Backend", command: "./gradlew test jacocoTestReport jacocoTestCoverageVerification", db: "atlas_test", user: "atlas_test", port: "5433", build: true }
                    - { name: "Frontend", command: "./gradlew testFrontend", db: "atlas_test", user: "atlas_test", port: "5433", build: false }
                    - { name: "Journey", command: "./gradlew testJourney", db: "atlas_journey", user: "atlas_journey", port: "5434", build: false }
        permissions:
            contents: read
        services:
            postgres:
                image: postgres:16
                ports:
                    - ${{ matrix.test-type.port }}:5432
                env:
                    POSTGRES_USER: ${{ matrix.test-type.user }}
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: ${{ matrix.test-type.db }}
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
            - uses: actions/checkout@v4

            - name: Setup Java and Gradle
              uses: ./.github/actions/set-up-java-gradle

            - name: Build with Gradle Wrapper
              if: ${{ matrix.test-type.build }}
              run: ./gradlew build
              env:
                  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:${{ matrix.test-type.port }}/${{ matrix.test-type.db }}
                  SPRING_DATASOURCE_USERNAME: ${{ matrix.test-type.user }}
                  SPRING_DATASOURCE_PASSWORD: password

            - name: Run ${{ matrix.test-type.name }} Tests
              run: ${{ matrix.test-type.command }}
              env:
                  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:${{ matrix.test-type.port }}/${{ matrix.test-type.db }}
                  SPRING_DATASOURCE_USERNAME: ${{ matrix.test-type.user }}
                  SPRING_DATASOURCE_PASSWORD: password

    security:
        name: "üîí Security"
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                security-type:
                    - { name: "Secret Scanning", type: "secrets", language: "", fetch_depth: 0 }
                    - { name: "Dependency Scan", type: "dependencies", language: "", fetch_depth: 1 }
                    - { name: "CVE Scan", type: "cve", language: "", fetch_depth: 1 }
                    - { name: "CodeQL Java", type: "codeql", language: "java-kotlin", fetch_depth: 1 }
                    - { name: "CodeQL JavaScript", type: "codeql", language: "javascript-typescript", fetch_depth: 1 }
                    - { name: "CodeQL Actions", type: "codeql", language: "actions", fetch_depth: 1 }
        permissions:
            contents: write
            actions: write
            security-events: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: ${{ matrix.security-type.fetch_depth }}

            - name: Setup Java and Gradle
              if: matrix.security-type.type == 'dependencies' || matrix.security-type.type == 'cve' || matrix.security-type.language == 'java-kotlin'
              uses: ./.github/actions/set-up-java-gradle

            - name: Run Secret Scanning
              if: matrix.security-type.type == 'secrets'
              uses: gitleaks/gitleaks-action@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
                  GITLEAKS_CONFIG: .gitleaks.toml

            - name: Generate and submit dependency graph
              if: matrix.security-type.type == 'dependencies'
              uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582

            - name: Run CVE Vulnerability Scan
              if: matrix.security-type.type == 'cve'
              env:
                  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
              run: |
                  echo "üîç Scanning for CVEs..."
                  ./gradlew dependencyCheckAnalyze
                  echo "Generating detailed CVE report..."
                  ./gradlew cveReport
                  echo "Checking for high-severity vulnerabilities..."
                  
                  # Check if any high/critical vulnerabilities exist
                  if ./gradlew dependencyCheckAnalyze | grep -q "One or more dependencies were identified with known vulnerabilities"; then
                    echo "‚ùå CVE scan failed - vulnerabilities found above threshold"
                    echo "See detailed report above for remediation steps"
                    exit 1
                  else
                    echo "‚úÖ CVE scan passed - no high-severity vulnerabilities found"
                  fi

            - name: Initialize CodeQL
              if: matrix.security-type.type == 'codeql'
              uses: github/codeql-action/init@v3
              with:
                  languages: ${{ matrix.security-type.language }}

            - name: Autobuild
              if: matrix.security-type.type == 'codeql'
              uses: github/codeql-action/autobuild@v3

            - name: Perform CodeQL Analysis
              if: matrix.security-type.type == 'codeql'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:${{ matrix.security-type.language }}"

    build:
        name: "üî® Build Application"
        if: github.ref == 'refs/heads/main'
        needs: [ testing, security ]
        runs-on: ubuntu-latest
        permissions:
            contents: read
        steps:
            -   uses: actions/checkout@v4

            -   name: Setup Java and Gradle
                uses: ./.github/actions/set-up-java-gradle

            -   name: Build Application
                run: ./gradlew build -x test -x flywayTestDbClean -x flywayTestDbMigrate

            -   name: Upload Build Artifacts
                uses: actions/upload-artifact@v4
                with:
                    name: build-artifacts
                    path: |
                        build/libs/*.jar
                        build/distributions/*
                    retention-days: 1

    deploy-staging:
        name: "üöÄ Deploy to Staging"
        if: github.ref == 'refs/heads/main'
        needs: [ build ]
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                stage:
                    - { name: "Deploy", type: "deploy", order: 1 }
                    - { name: "Health Check", type: "health", order: 2, auto: true }
                    - { name: "Journey Tests", type: "journey", order: 2, auto: true }
                    - { name: "Staging Logs", type: "logs", order: 2, auto: false }
        environment: ${{ matrix.stage.type == 'logs' && 'staging-logs' || (matrix.stage.type == 'deploy' && 'staging' || '') }}
        permissions:
            contents: read
        steps:
            -   uses: actions/checkout@v4

            -   name: Download Build Artifacts
                if: matrix.stage.type == 'deploy'
                uses: actions/download-artifact@v4
                with:
                    name: build-artifacts
                    path: build

            -   name: Deploy to Staging
                if: matrix.stage.type == 'deploy'
                run: |
                    echo "üöÄ Deployed to Staging Environment"
                    echo "Environment: staging"
                    echo "Branch: ${{ github.ref_name }}"
                    echo "Commit: ${{ github.sha }}"
                    echo "Artifacts available in: build/"
                    ls -la build/

            -   name: Wait for deployment to stabilize
                if: matrix.stage.order == 2
                run: |
                    echo "Waiting for deployment to complete and stabilize..."
                    sleep 30

            -   name: Check if validation job should run
                if: matrix.stage.auto == false && github.event_name == 'push'
                run: |
                    echo "Skipping manual job on automatic pipeline run"
                    exit 0

            -   name: Setup Java and Gradle
                if: matrix.stage.type == 'journey' && (matrix.stage.auto == true || github.event_name == 'workflow_dispatch')
                uses: ./.github/actions/set-up-java-gradle

            -   name: Run Health Check
                if: matrix.stage.type == 'health' && (matrix.stage.auto == true || github.event_name == 'workflow_dispatch')
                run: |
                    echo "üè• Testing Staging Health"
                    echo "Checking actuator endpoint..."
                    echo "Status: Healthy"

            -   name: Run Journey Tests on Staging
                if: matrix.stage.type == 'journey' && (matrix.stage.auto == true || github.event_name == 'workflow_dispatch')
                run: |
                    echo "üß≠ Running Journey Tests on Staging"
                    echo "Executing staging journey tests..."
                    echo "All journey tests passed"

            -   name: Retrieve Staging Logs
                if: matrix.stage.type == 'logs' && github.event_name == 'workflow_dispatch'
                run: |
                    echo "üìÑ Retrieving Staging Logs"
                    echo "Time period: Last 1 hour"
                    echo "Log level: INFO and above"
                    echo "Logs retrieved successfully"

    deploy-production:
        name: "üöÄ Deploy to Production"
        if: github.ref == 'refs/heads/main'
        needs: [deploy-staging]
        runs-on: ubuntu-latest
        environment: production
        permissions:
            contents: read
        steps:
            -   uses: actions/checkout@v4

            -   name: Download Build Artifacts
                uses: actions/download-artifact@v4
                with:
                    name: build-artifacts
                    path: build

            -   name: Deploy to Production
                run: |
                    echo "üöÄ Deployed to Production Environment"
                    echo "Environment: production"  
                    echo "Branch: ${{ github.ref_name }}"
                    echo "Commit: ${{ github.sha }}"
                    echo "Artifacts available in: build/"
                    ls -la build/
