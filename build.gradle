import org.flywaydb.gradle.task.FlywayCleanTask
import org.flywaydb.gradle.task.FlywayMigrateTask

buildscript {
    dependencies {
        classpath "org.flywaydb:flyway-database-postgresql:11.10.5"
    }

    configurations.configureEach {
        resolutionStrategy {
            force 'org.apache.commons:commons-compress:1.26.0'
            force 'org.apache.commons:commons-lang3:3.18.0'
        }
    }
}
plugins {
    id 'org.springframework.boot' version '4.0.0-M1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'jacoco'
    id 'distribution'
    id 'application'
    id "org.flywaydb.flyway" version "11.10.5"
    id 'com.diffplug.spotless' version '7.0.4'
    id 'org.owasp.dependencycheck' version '12.1.3'
}


configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.commons:commons-compress:1.26.0'
        force 'com.nimbusds:nimbus-jose-jwt:10.3.1'
        force 'org.apache.commons:commons-lang3:3.18.0'
    }
}

dependencyCheck {
    formats = ['HTML', 'JSON']
    outputDirectory = 'build/reports'
    nvd.apiKey = System.getenv('NVD_API_KEY')
}

dependencyLocking {
    lockAllConfigurations()
    lockMode = LockMode.LENIENT
    ignoredDependencies = []
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    configureEach {
        resolutionStrategy.activateDependencyLocking()
    }
}


distributions {
    main {
        distributionBaseName.set(rootProject.name)
    }
}

repositories {
    mavenCentral()

}

group = 'com'
version = '0.0.1-SNAPSHOT'
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/atlas_dev'
    user = 'dev'
    password = 'password'
    cleanDisabled = false
}

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.13"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencyManagement {
    dependencies {
        dependency 'org.apache.tomcat.embed:tomcat-embed-core:11.0.10'
        dependency 'org.apache.tomcat.embed:tomcat-embed-websocket:11.0.10'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.apache.httpcomponents.client5:httpclient5-win:5.2.3'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql:42.7.7'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.c4-soft.springaddons:spring-addons-oauth2-test:8.1.16'

}

application {
    mainClass.set('com.atlas.AtlasApplication')
}

bootJar.enabled = false
bootDistZip.enabled = false
bootDistTar.enabled = false

sourceSets {
    main {
        java {
            String activeProfile = System.getenv('SPRING_PROFILES_ACTIVE')
            if(activeProfile == null || !activeProfile.toLowerCase().equalsIgnoreCase("dev")) {
                exclude '**/dev_only'
            }


        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

spotless {
    java {
        target 'src/**/*.java'

        googleJavaFormat('1.17.0').aosp()

        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.named('resolveMainClassName') {
    dependsOn tasks.named('copyFrontend')
}
tasks.named('jar') {
    dependsOn('copyFrontend')
}

tasks.named('compileTestJava') {
    dependsOn('copyFrontend')
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    minHeapSize = "1024m"
    maxHeapSize = "2048m"

    dependsOn("flywayTestDbClean", "flywayTestDbMigrate")
}

tasks.register('installFrontend', Exec) {
    inputs.file(file("frontend/yarn.lock"))
    inputs.file(file("frontend/package.json"))
    commandLine("yarn", "--cwd", "frontend", "install")
}

tasks.register('installJourney', Exec) {
    inputs.file(file("journey/yarn.lock"))
    inputs.file(file("journey/package.json"))
    outputs.dir(file("journey/node_modules"))
    commandLine("yarn", "--cwd", "journey", "install")
}

tasks.register('buildFrontend', Exec) {
    dependsOn("installFrontend")
    inputs.dir(file("frontend"))
    outputs.dir(file("frontend/build"))
    commandLine("yarn", "--cwd", "frontend", "build")
}

tasks.register('copyFrontend', Sync) {
    dependsOn("buildFrontend")
    from(file("./frontend/build"))
    into(file("$buildDir/resources/main/static"))
    doLast {
        println("copied built frontend to static resources")
    }
}

tasks.register('copyFrontendForIntelliJ', Sync) {
    dependsOn("buildFrontend")
    from(file("./frontend/build"))
    into(file("./src/main/resources/static"))
    doLast {
        println("copied built frontend to static resources")
    }
}

tasks.register('cleanFrontend', Delete) {
    delete(file("./frontend/build"))
    delete(file("./src/main/resources/static"))
}

tasks.register('testFrontend', Exec) {
    dependsOn("installFrontend")
    commandLine("yarn", "--cwd", "frontend", "test:ci")
}

tasks.register('testJourney', Exec) {
    dependsOn("installJourney", 'flywayJourneyTestDbClean', 'flywayJourneyTestDbMigrate')
    commandLine("yarn", "--cwd", "journey", "test")
    environment("SPRING_PROFILES_ACTIVE", "journey")
}

tasks.register('installPerformance', Exec) {
    inputs.file(file("performance/yarn.lock"))
    inputs.file(file("performance/package.json"))
    outputs.dir(file("performance/node_modules"))
    commandLine("yarn", "--cwd", "performance", "install")
}

tasks.register('flywayTestDbClean', FlywayCleanTask) {
    url = 'jdbc:postgresql://localhost:5433/atlas_test'
    user = 'atlas_test'
    password = 'password'
    cleanDisabled = false
}

tasks.register('flywayTestDbMigrate', FlywayMigrateTask) {
    url = 'jdbc:postgresql://localhost:5433/atlas_test'
    user = 'atlas_test'
    password = 'password'
    cleanDisabled = false
}

tasks.register('flywayJourneyTestDbClean', FlywayCleanTask) {
    url = 'jdbc:postgresql://localhost:5434/atlas_journey'
    user = 'atlas_journey'
    password = 'password'
    cleanDisabled = false
}

tasks.register('flywayJourneyTestDbMigrate', FlywayMigrateTask) {
    url = 'jdbc:postgresql://localhost:5434/atlas_journey'
    user = 'atlas_journey'
    password = 'password'
    cleanDisabled = false
}


tasks.register('testPerformance', Exec) {
    dependsOn("installPerformance")
    commandLine("yarn", "--cwd", "performance", "test")
}

tasks.register("testUnits"){
    dependsOn("test", "testFrontend")
}

tasks.register('testAll') {
    dependsOn("test", "testFrontend", "testJourney")
}

tasks.register('showRepositories') {
    repositories.each {
        println "repository: ${it.name} ('${it.url}')"
    }
}

bootJar {
    dependsOn(copyFrontend)
}

bootRun {
    dependsOn(copyFrontend)
}

clean {
    dependsOn(cleanFrontend)
}

apply from: 'gradle/cve-report.gradle'
apply from: 'gradle/format-project.gradle'
apply from: 'gradle/jacoco-summary.gradle'
